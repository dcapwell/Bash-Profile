function aws-ssh() {
  if [ "$1" == "" ]; then
      echo "Unable to login to AWS; No host given" >&2
      return 1
  fi

  if [[ $TERM = "screen" ]]; then
    # Print the control line to screen with hostname
    #tempvar=$(eval "echo \${$#}")
    tempvar=$1
    case $tempvar in
      *compute-1.amazonaws.com)   SHOW_HOST=$(echo $tempvar | sed -e 's/\.compute-1\.amazonaws\.com//') ;;
      *com)     SHOW_HOST=$(echo $tempvar | sed -r -e 's/\.\w+\.\w+$//') ;;
      *)      SHOW_HOST=$tempvar ;;
    esac
    echo -n -e "\033k${SHOW_HOST}\033\\"
  fi

  echo ssh -i ${EC2_PEM:-~/.ssh/aws.pem} -o "UserKnownHostsFile /dev/null" -o StrictHostKeyChecking=no ec2-user@$1
  # Will respawn your ssh session, in case it gets killed (e.g. by the firewall)
  # NOTE: If you actually want to kill the ssh session, you need to exit ssh yourself, then ^C to kill this script
  while [ 1 = 1 ]; do
    ssh -i ${EC2_PEM:-~/.ssh/aws.pem} -o "UserKnownHostsFile /dev/null" -o StrictHostKeyChecking=no ec2-user@$1
    sleep 5
  done

  if [[ $TERM = "screen" ]]; then
    # Change back to local system's hostname
    SHOW_HOST=$(echo $HOSTNAME | awk -F. '{print $1}')
    echo -n -e "\033k${PREFIX}${SHOW_HOST}\033\\"
  fi
}

function aws-scp() {
  if [ "$2" == "" ]; then
      echo "Unable to login to AWS; No host given" >&2
      return 1
  fi
  scp -i ${EC2_PEM:-~/.ssh/aws.pem} -o StrictHostKeyChecking=no $1 ec2-user@$2:~
}

function aws-scp-hosts() {
  local file=$1
  shift

  for host in $@; do
    aws-scp $file $host
  done
}
