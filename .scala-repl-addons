def dir(value: Any, 
        space: String = "  ", 
        includeScope: List[String] = List("public")): Unit = {
  import java.lang.reflect._

  def methodScope(mods: Int): Option[String] = {
    if(Modifier.isPublic(mods)) Some("public")
    else if(Modifier.isPrivate(mods)) Some("private")
    else if(Modifier.isProtected(mods)) Some("protected")
    else None
  }

  def methodSignature(method: Method): String = {
    val name = method.getName
    val params = method.getParameterTypes.map(_.getName)
    val ret = method.getReturnType.getName
    val mods = method.getModifiers
    // unknown happens (look at string).  I would expect this to be default, but
    // when I look at openjdk, the methods with unknown don't exist...
    var scope = methodScope(mods) getOrElse "unknown"

    if(Modifier.isFinal(mods)) scope = s"final $scope"
    if(Modifier.isStatic(mods)) scope = s"static $scope"

    s"$scope $name(${params.mkString(", ")}): $ret"
  }

  println(value.getClass.getName)

  val methods = value.getClass.getMethods.sortBy(_.getName).map(methodSignature)

  println(s"${space}${methods.mkString(s"\n$space")}")
}

// eed3si9n.com/learning-scalaz/Kinds.html
def kind[A: scala.reflect.runtime.universe.TypeTag]: String = {
  import scala.reflect.runtime.universe._
  def typeKind(sig: Type): String = sig match {
    case PolyType(params, resultType) =>
      (params map { p =>
        typeKind(p.typeSignature) match {
          case "*" => "*"
          case s   => "(" + s + ")"
        }
      }).mkString(" -> ") + " -> *"
    case _ => "*"
  }
  def typeSig(tpe: Type): Type = tpe match {
    case SingleType(pre, sym) => sym.companionSymbol.typeSignature
    case ExistentialType(q, TypeRef(pre, sym, args)) => sym.typeSignature
    case TypeRef(pre, sym, args) => sym.typeSignature
  }
  val sig = typeSig(typeOf[A])
  val s = typeKind(sig)
  sig.typeSymbol.name + "'s kind is " + s + ". " + (s match {
    case "*" =>
      "This is a proper type."
    case x if !(x contains "(") =>
      "This is a type constructor: a 1st-order-kinded type."
    case x =>
      "This is a type constructor that takes type constructor(s): a higher-kinded type."
  })
}
